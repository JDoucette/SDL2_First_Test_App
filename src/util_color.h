

struct Color4f_t
{
    float r, g, b, a;
};


struct Color4i_t
{
    uint8_t r, g, b, a;
};


inline
Color4i_t
ColorF32ToU8( const float r, const float g, const float b, const float a = 1.f )
{
    const float _r = r * 255.f;
    const float _g = g * 255.f;
    const float _b = b * 255.f;
    const float _a = a * 255.f;
    Color4i_t c;
    c.r = (uint8_t) _r;
    c.g = (uint8_t) _g;
    c.b = (uint8_t) _b;
    c.a = (uint8_t) _a;
    return c;
}


inline
float
ColorU8ToF32( const uint8_t intensity )
{
    // TODO: Gamma correct ! Use Gamma 2.2
    static const float gaIntToFloat[ 256 ] = {
          0.0000000f // 0x00
        , 0.0039216f // 0x01
        , 0.0078431f // 0x02
        , 0.0117647f // 0x03
        , 0.0156863f // 0x04
        , 0.0196078f // 0x05
        , 0.0235294f // 0x06
        , 0.0274510f // 0x07
        , 0.0313726f // 0x08
        , 0.0352941f // 0x09
        , 0.0392157f // 0x0A
        , 0.0431373f // 0x0B
        , 0.0470588f // 0x0C
        , 0.0509804f // 0x0D
        , 0.0549020f // 0x0E
        , 0.0588235f // 0x0F
        , 0.0627451f // 0x10
        , 0.0666667f // 0x11
        , 0.0705882f // 0x12
        , 0.0745098f // 0x13
        , 0.0784314f // 0x14
        , 0.0823529f // 0x15
        , 0.0862745f // 0x16
        , 0.0901961f // 0x17
        , 0.0941176f // 0x18
        , 0.0980392f // 0x19
        , 0.1019608f // 0x1A
        , 0.1058824f // 0x1B
        , 0.1098039f // 0x1C
        , 0.1137255f // 0x1D
        , 0.1176471f // 0x1E
        , 0.1215686f // 0x1F
        , 0.1254902f // 0x20
        , 0.1294118f // 0x21
        , 0.1333333f // 0x22
        , 0.1372549f // 0x23
        , 0.1411765f // 0x24
        , 0.1450980f // 0x25
        , 0.1490196f // 0x26
        , 0.1529412f // 0x27
        , 0.1568628f // 0x28
        , 0.1607843f // 0x29
        , 0.1647059f // 0x2A
        , 0.1686275f // 0x2B
        , 0.1725490f // 0x2C
        , 0.1764706f // 0x2D
        , 0.1803922f // 0x2E
        , 0.1843137f // 0x2F
        , 0.1882353f // 0x30
        , 0.1921569f // 0x31
        , 0.1960784f // 0x32
        , 0.2000000f // 0x33
        , 0.2039216f // 0x34
        , 0.2078431f // 0x35
        , 0.2117647f // 0x36
        , 0.2156863f // 0x37
        , 0.2196078f // 0x38
        , 0.2235294f // 0x39
        , 0.2274510f // 0x3A
        , 0.2313726f // 0x3B
        , 0.2352941f // 0x3C
        , 0.2392157f // 0x3D
        , 0.2431373f // 0x3E
        , 0.2470588f // 0x3F
        , 0.2509804f // 0x40
        , 0.2549020f // 0x41
        , 0.2588235f // 0x42
        , 0.2627451f // 0x43
        , 0.2666667f // 0x44
        , 0.2705882f // 0x45
        , 0.2745098f // 0x46
        , 0.2784314f // 0x47
        , 0.2823530f // 0x48
        , 0.2862745f // 0x49
        , 0.2901961f // 0x4A
        , 0.2941177f // 0x4B
        , 0.2980392f // 0x4C
        , 0.3019608f // 0x4D
        , 0.3058824f // 0x4E
        , 0.3098039f // 0x4F
        , 0.3137255f // 0x50
        , 0.3176471f // 0x51
        , 0.3215686f // 0x52
        , 0.3254902f // 0x53
        , 0.3294118f // 0x54
        , 0.3333333f // 0x55
        , 0.3372549f // 0x56
        , 0.3411765f // 0x57
        , 0.3450980f // 0x58
        , 0.3490196f // 0x59
        , 0.3529412f // 0x5A
        , 0.3568628f // 0x5B
        , 0.3607843f // 0x5C
        , 0.3647059f // 0x5D
        , 0.3686275f // 0x5E
        , 0.3725490f // 0x5F
        , 0.3764706f // 0x60
        , 0.3803922f // 0x61
        , 0.3843137f // 0x62
        , 0.3882353f // 0x63
        , 0.3921569f // 0x64
        , 0.3960784f // 0x65
        , 0.4000000f // 0x66
        , 0.4039216f // 0x67
        , 0.4078431f // 0x68
        , 0.4117647f // 0x69
        , 0.4156863f // 0x6A
        , 0.4196078f // 0x6B
        , 0.4235294f // 0x6C
        , 0.4274510f // 0x6D
        , 0.4313726f // 0x6E
        , 0.4352941f // 0x6F
        , 0.4392157f // 0x70
        , 0.4431373f // 0x71
        , 0.4470588f // 0x72
        , 0.4509804f // 0x73
        , 0.4549020f // 0x74
        , 0.4588235f // 0x75
        , 0.4627451f // 0x76
        , 0.4666667f // 0x77
        , 0.4705882f // 0x78
        , 0.4745098f // 0x79
        , 0.4784314f // 0x7A
        , 0.4823529f // 0x7B
        , 0.4862745f // 0x7C
        , 0.4901961f // 0x7D
        , 0.4941176f // 0x7E
        , 0.4980392f // 0x7F
        , 0.5019608f // 0x80
        , 0.5058824f // 0x81
        , 0.5098040f // 0x82
        , 0.5137255f // 0x83
        , 0.5176471f // 0x84
        , 0.5215687f // 0x85
        , 0.5254902f // 0x86
        , 0.5294118f // 0x87
        , 0.5333334f // 0x88
        , 0.5372549f // 0x89
        , 0.5411765f // 0x8A
        , 0.5450981f // 0x8B
        , 0.5490196f // 0x8C
        , 0.5529412f // 0x8D
        , 0.5568628f // 0x8E
        , 0.5607843f // 0x8F
        , 0.5647059f // 0x90
        , 0.5686275f // 0x91
        , 0.5725490f // 0x92
        , 0.5764706f // 0x93
        , 0.5803922f // 0x94
        , 0.5843138f // 0x95
        , 0.5882353f // 0x96
        , 0.5921569f // 0x97
        , 0.5960785f // 0x98
        , 0.6000000f // 0x99
        , 0.6039216f // 0x9A
        , 0.6078432f // 0x9B
        , 0.6117647f // 0x9C
        , 0.6156863f // 0x9D
        , 0.6196079f // 0x9E
        , 0.6235294f // 0x9F
        , 0.6274510f // 0xA0
        , 0.6313726f // 0xA1
        , 0.6352941f // 0xA2
        , 0.6392157f // 0xA3
        , 0.6431373f // 0xA4
        , 0.6470588f // 0xA5
        , 0.6509804f // 0xA6
        , 0.6549020f // 0xA7
        , 0.6588235f // 0xA8
        , 0.6627451f // 0xA9
        , 0.6666667f // 0xAA
        , 0.6705883f // 0xAB
        , 0.6745098f // 0xAC
        , 0.6784314f // 0xAD
        , 0.6823530f // 0xAE
        , 0.6862745f // 0xAF
        , 0.6901961f // 0xB0
        , 0.6941177f // 0xB1
        , 0.6980392f // 0xB2
        , 0.7019608f // 0xB3
        , 0.7058824f // 0xB4
        , 0.7098039f // 0xB5
        , 0.7137255f // 0xB6
        , 0.7176471f // 0xB7
        , 0.7215686f // 0xB8
        , 0.7254902f // 0xB9
        , 0.7294118f // 0xBA
        , 0.7333333f // 0xBB
        , 0.7372549f // 0xBC
        , 0.7411765f // 0xBD
        , 0.7450981f // 0xBE
        , 0.7490196f // 0xBF
        , 0.7529412f // 0xC0
        , 0.7568628f // 0xC1
        , 0.7607843f // 0xC2
        , 0.7647059f // 0xC3
        , 0.7686275f // 0xC4
        , 0.7725490f // 0xC5
        , 0.7764706f // 0xC6
        , 0.7803922f // 0xC7
        , 0.7843137f // 0xC8
        , 0.7882353f // 0xC9
        , 0.7921569f // 0xCA
        , 0.7960784f // 0xCB
        , 0.8000000f // 0xCC
        , 0.8039216f // 0xCD
        , 0.8078431f // 0xCE
        , 0.8117647f // 0xCF
        , 0.8156863f // 0xD0
        , 0.8196079f // 0xD1
        , 0.8235294f // 0xD2
        , 0.8274510f // 0xD3
        , 0.8313726f // 0xD4
        , 0.8352941f // 0xD5
        , 0.8392157f // 0xD6
        , 0.8431373f // 0xD7
        , 0.8470588f // 0xD8
        , 0.8509804f // 0xD9
        , 0.8549020f // 0xDA
        , 0.8588235f // 0xDB
        , 0.8627451f // 0xDC
        , 0.8666667f // 0xDD
        , 0.8705882f // 0xDE
        , 0.8745098f // 0xDF
        , 0.8784314f // 0xE0
        , 0.8823529f // 0xE1
        , 0.8862745f // 0xE2
        , 0.8901961f // 0xE3
        , 0.8941177f // 0xE4
        , 0.8980392f // 0xE5
        , 0.9019608f // 0xE6
        , 0.9058824f // 0xE7
        , 0.9098039f // 0xE8
        , 0.9137255f // 0xE9
        , 0.9176471f // 0xEA
        , 0.9215686f // 0xEB
        , 0.9254902f // 0xEC
        , 0.9294118f // 0xED
        , 0.9333333f // 0xEE
        , 0.9372549f // 0xEF
        , 0.9411765f // 0xF0
        , 0.9450980f // 0xF1
        , 0.9490196f // 0xF2
        , 0.9529412f // 0xF3
        , 0.9568627f // 0xF4
        , 0.9607843f // 0xF5
        , 0.9647059f // 0xF6
        , 0.9686275f // 0xF7
        , 0.9725490f // 0xF8
        , 0.9764706f // 0xF9
        , 0.9803922f // 0xFA
        , 0.9843137f // 0xFB
        , 0.9882353f // 0xFC
        , 0.9921569f // 0xFD
        , 0.9960784f // 0xFE
        , 1.0000000f // 0xFF
    };
    return gaIntToFloat[ intensity ];
}

inline
Color4f_t
ColorU8ToF32( const uint8_t r, const uint8_t g, const uint8_t b, const uint8_t a = 0xFF )
{
    Color4f_t color;
              color.r = ColorU8ToF32( r );
              color.g = ColorU8ToF32( g );
              color.b = ColorU8ToF32( b );
              color.a = ColorU8ToF32( a );
    return    color;
}


// returns AABBGGRR
inline
uint32_t
UnpackColorNibToByte( uint16_t packedColorABGR )
{
    // Alpha is HTML nibble color, i.e. 0xE -> 0xEE
    // RGB is scaled
    // 0 = 0
    // E = E*3 = 0x2A
    // F = F*3 = 0x2D
    uint32_t n = (uint32_t) packedColorABGR;
/*
    uint32_t a = ((n & 0x000F) | (n & 0x000F) << 4) << 24;
    uint32_t b = ((n & 0x00F0) | (n & 0x00F0) >> 4) << 16;
    uint32_t g = ((n & 0x0F00) | (n & 0x0F00) >> 4) <<  8;
    uint32_t r = ((n & 0xF000) | (n & 0xF000) >> 4) >>  8;
*/
    uint32_t a = ((n & 0xF000) | (n & 0xF000) >> 4) << 16;
    uint32_t b = (n & 0x0F00) >> 8;
    uint32_t g = (n & 0x00F0) >> 4;
    uint32_t r = (n & 0x000F) >> 0;

    b *= 4;
    g *= 4;
    r *= 4;

    b <<= 16;
    g <<=  8;
    r <<=  0;

    uint32_t c = a | b | g | r;
    return c;
}
